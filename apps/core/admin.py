from django import forms
from django.conf import settings
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.models import User
from django.contrib.gis import admin
from django.core.exceptions import ValidationError
from django.utils.translation import ugettext_lazy as _
from slugify import slugify

from apps.core.models import (
    Country, City, Company, UsersToCompany, FeatureFlag, Sectors, WasteType,
)


def validate_object_exists(model, lookup_field, lookup_value, line_no, **more_lookups):
    if not lookup_value:
        return None

    try:
        lookups = dict()
        lookups[lookup_field] = lookup_value
        lookups.update(more_lookups)
        return model.objects.get(**lookups)
    except model.DoesNotExist:
        error_params = {'model': model.__name__.lower(), 'lookup': lookup_value, 'line_no': line_no}
        raise ValidationError('There is no such %(model)s: %(lookup)s (line %(line_no)s)', params=error_params)


def clean_company_username_prefix(username_prefix, company_name, exclude_id=None):
    prefix_generated = False
    if not username_prefix:
        if company_name is None:
            # This means company name wasn't provided hence form validation is going to fail
            return username_prefix
        username_prefix = f'{slugify(company_name)}-'
        prefix_generated = True
    qs = Company.objects.filter(username_prefix=username_prefix)
    if exclude_id:
        qs = qs.exclude(pk=exclude_id)
    if qs.count() > 0:
        if prefix_generated:
            raise ValidationError(f"There's an existing company with generated username prefix '{username_prefix}'")
        else:
            raise ValidationError("There's an existing company with provided username prefix, choose another one")
    return username_prefix


@admin.register(Country)
class CountryAdmin(admin.ModelAdmin):
    list_display = ('name',)


@admin.register(City)
class CityAdmin(admin.ModelAdmin):
    list_display = ('title', 'country')
    list_filter = ('country',)


class CompanyAdminForm(forms.ModelForm):
    username_prefix = forms.CharField(required=False, help_text='Will be autogenerated if left empty')
    lang = forms.ChoiceField(choices=settings.LANGUAGES)

    def clean_username_prefix(self):
        return clean_company_username_prefix(self.cleaned_data["username_prefix"], self.cleaned_data.get("name"),
                                             self.instance.pk if self.instance else None)


@admin.register(Company)
class CompanyAdmin(admin.ModelAdmin):
    list_display = ('id', 'name', 'username_prefix')
    form = CompanyAdminForm


@admin.register(FeatureFlag)
class FeatureFlagAdmin(admin.ModelAdmin):
    list_display = ('feature', 'company', 'enabled')


class CompanyInline(admin.StackedInline):
    verbose_name = _('company')
    verbose_name_plural = _('companies')
    model = UsersToCompany
    can_delete = False
    extra = 1


class User2Admin(BaseUserAdmin):
    list_filter = ('is_staff', 'is_superuser', 'is_active',
                   'user_to_company__role', 'user_to_company__company')
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff',
                    'get_company', 'get_role')
    inlines = (CompanyInline,)

    def get_queryset(self, request):
        queryset = super(User2Admin, self).get_queryset(request)
        return queryset.select_related('user_to_company')

    def get_role(self, obj):
        return obj.user_to_company.get_role_display()

    get_role.short_description = _('role')

    def get_company(self, obj):
        return obj.user_to_company.company

    get_company.short_description = _('company')

    def save_model(self, request, obj, form, change):
        try:
            users_to_company_exists = obj.user_to_company is not None
        except UsersToCompany.DoesNotExist:
            users_to_company_exists = False
        if users_to_company_exists:
            empty_link = obj.user_to_company.company is None and not bool(obj.user_to_company.role.strip())
            if empty_link:
                obj.user_to_company.delete()
        super().save_model(request, obj, form, change)


admin.site.unregister(User)
admin.site.register(User, User2Admin)


@admin.register(Sectors)
class SectorsAdmin(admin.ModelAdmin):
    list_display = ('name', 'company')
    list_filter = ('company',)


@admin.register(WasteType)
class WasteTypeAdmin(admin.ModelAdmin):
    list_display = ('title', 'code')


ok_status_icon_markup =\
    '<span style="display: inline-block; width: 1em; height: 1em; background: green; border-radius: 50%"></span>'
fail_status_icon_markup =\
    '<span style="display: inline-block; width: 1em; height: 1em; background: red; border-radius: 50%"></span>'
