# Generated by Django 2.2.10 on 2020-02-07 09:29

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='SensorSettingsProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_schedule_start', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('connection_schedule_stop', models.IntegerField(default=24, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('connections_per_day', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(144)])),
                ('message_send_retries', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('send_timeout', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1.0)])),
                ('receive_timeout', models.FloatField(default=3.0, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)])),
                ('gps_timeout', models.FloatField(default=3.0, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)])),
                ('sim_balance_query', models.CharField(max_length=20)),
                ('phone_number_query', models.CharField(max_length=20)),
                ('fire_min_temp', models.IntegerField(default=80, help_text='in celsius (C)', validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(100)])),
                ('shutdown_max_temp', models.IntegerField(default=85, help_text='in celsius (C)', validators=[django.core.validators.MinValueValidator(65), django.core.validators.MaxValueValidator(105)])),
                ('min_battery_voltage', models.FloatField(default=2.1, validators=[django.core.validators.MinValueValidator(2.0), django.core.validators.MaxValueValidator(3.6)])),
                ('server_host', models.CharField(max_length=100)),
                ('server_port', models.IntegerField(default=1883, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)])),
                ('login', models.CharField(max_length=150)),
                ('password', models.CharField(max_length=128)),
                ('data_topic', models.CharField(max_length=1024)),
                ('jobs_topic', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='create time')),
                ('mtime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='update time')),
                ('serial_number', models.CharField(max_length=200, unique=True, verbose_name='serial number')),
                ('phone_number', models.CharField(max_length=40, verbose_name='phone number')),
                ('hardware_identity', models.CharField(max_length=50, verbose_name='hardware identity')),
                ('fullness', models.IntegerField(default=0, help_text='in percents (%)', verbose_name='fullness')),
                ('battery', models.IntegerField(default=0, help_text='in percents (%)', verbose_name='battery charge')),
                ('temperature', models.IntegerField(default=0, help_text='in celsius (C)', verbose_name='temperature')),
                ('settings_profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='profile_sensors', to='sensors.SensorSettingsProfile')),
            ],
        ),
    ]
