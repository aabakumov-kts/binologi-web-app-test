# Generated by Django 2.2.10 on 2020-02-14 10:12

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('sensors', '0002_auto_20200210_1045'),
    ]

    operations = [
        migrations.CreateModel(
            name='ErrorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=8, unique=True, verbose_name='code error')),
                ('title', models.CharField(max_length=256, verbose_name='title')),
            ],
            options={
                'verbose_name': 'error type',
                'verbose_name_plural': 'error types',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Temperature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('value', models.IntegerField(default=0)),
                ('actual', models.BooleanField(default=False, verbose_name='actual data')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temperature_table', to='sensors.Sensor', verbose_name='sensor')),
            ],
            options={
                'verbose_name': 'temperature',
                'verbose_name_plural': 'temperature',
                'ordering': ('ctime',),
            },
        ),
        migrations.CreateModel(
            name='SimBalance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('balance', models.IntegerField(default=0)),
                ('actual', models.BooleanField(default=False, verbose_name='actual data')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sensors.Sensor', verbose_name='sensor')),
            ],
            options={
                'verbose_name': 'sim_balance',
                'verbose_name_plural': 'sim_balance',
                'ordering': ('ctime',),
            },
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_json', django.contrib.postgres.fields.jsonb.JSONField()),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sensors.Sensor')),
            ],
            options={
                'ordering': ('-ctime',),
            },
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('actual', models.BooleanField(default=False, verbose_name='actual data')),
                ('error_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sensors.ErrorType', verbose_name='error type')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sensors.Sensor', verbose_name='sensor')),
            ],
            options={
                'verbose_name': 'error',
                'verbose_name_plural': 'errors',
                'ordering': ('ctime',),
            },
        ),
        migrations.CreateModel(
            name='BatteryLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('level', models.IntegerField(default=0)),
                ('volts', models.FloatField(default=0)),
                ('actual', models.BooleanField(default=False, verbose_name='actual data')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sensors.Sensor', verbose_name='sensor')),
            ],
        ),
    ]
