# Generated by Django 2.2.4 on 2019-10-18 11:38

import colorfield.fields
import datetime
from django.conf import settings
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# app.migrations.0032_fill_new_roles
# app.migrations.0050_fill_userstocompany
# app.migrations.0055_fill_models

def fill_new_roles(apps, schema_editor):
    usertocompany = apps.get_model('app', 'UsersToCompany')
    for item in usertocompany.objects.all():
        item.new_role = item.role.sysid or 'DR'
        item.save()


def create_userstocompany(apps, schema_editor):
    user_model = apps.get_model('auth', 'User')
    userstocompany_model = apps.get_model('app', 'UsersToCompany')
    for user in user_model.objects.all():
        userstocompany_model.objects.get_or_create(user=user)


def fill_models(apps, schema_editor):
    # Loading data was excluded from migrations
    # However migration itself is needed to be kept since it was already applied somewhere
    pass


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='название')),
            ],
            options={
                'verbose_name': 'страна',
                'verbose_name_plural': 'страна',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='название')),
                ('minsim', models.IntegerField(default=0, verbose_name='минимальный баланс SIM')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Country', verbose_name='страна')),
            ],
            options={
                'verbose_name': 'компания',
                'verbose_name_plural': 'компании',
            },
        ),
        migrations.CreateModel(
            name='ContainerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='название')),
            ],
            options={
                'verbose_name': 'тип контейнера',
                'verbose_name_plural': 'типы контейнеров',
            },
        ),
        migrations.CreateModel(
            name='Sectors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='название')),
            ],
            options={
                'verbose_name': 'сектор',
                'verbose_name_plural': 'сектор',
            },
        ),
        migrations.CreateModel(
            name='WasteType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='название')),
                ('code', models.CharField(db_index=True, max_length=8, null=True, verbose_name='код отходов')),
            ],
            options={
                'verbose_name': 'тип мусора',
                'verbose_name_plural': 'типы мусора',
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='название')),
                ('sysid', models.SlugField(max_length=32, verbose_name='системный идентификатор')),
            ],
            options={
                'verbose_name': 'роль',
                'verbose_name_plural': 'роли',
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='компания')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Country', verbose_name='страна')),
                ('is_master', models.BooleanField(default=False, verbose_name='ведущий?')),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='местоположение')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='номер телефона')),
                ('press_cycles', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='циклы пресования')),
                ('serial_number', models.CharField(max_length=200, verbose_name='серийный номер')),
                ('container_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ContainerType', verbose_name='тип контейнера')),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Sectors', verbose_name='сектор')),
                ('waste_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.WasteType', verbose_name='тип мусора')),
                ('fullness', models.IntegerField(default=0, null=True, verbose_name='заполненность')),
            ],
            options={
                'verbose_name': 'контейнер',
                'verbose_name_plural': 'конетейнеры',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='название')),
            ],
            options={
                'verbose_name': 'оборудование',
                'verbose_name_plural': 'оборудование',
            },
        ),
        migrations.CreateModel(
            name='ErrorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=8, verbose_name='код ошибки')),
                ('title', models.CharField(max_length=256, verbose_name='название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание')),
                ('equipment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Equipment', verbose_name='оборудование')),
            ],
            options={
                'ordering': ('code',),
                'verbose_name': 'тип ошибки',
                'verbose_name_plural': 'типы ошибок',
            },
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='создано')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Container', verbose_name='контейнер')),
                ('error_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ErrorType', verbose_name='тип ошибки')),
            ],
            options={
                'ordering': ('ctime',),
                'verbose_name': 'ошибка',
                'verbose_name_plural': 'ошибки',
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='маршрут')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='создано')),
                ('start_time', models.DateTimeField(null=True, verbose_name='время начала')),
                ('end_time', models.DateTimeField(null=True, verbose_name='время конца')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'маршрут',
                'verbose_name_plural': 'маршруты',
                'ordering': ('-ctime',),
            },
        ),
        migrations.CreateModel(
            name='Occupancy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='название')),
                ('range', django.contrib.postgres.fields.ranges.IntegerRangeField(help_text='Нижнее значение всегда включено в диапазон, врехнее не включено.', verbose_name='диапазон')),
                ('color', colorfield.fields.ColorField(max_length=18, null=True, verbose_name='цвет маркера')),
            ],
            options={
                'ordering': ('-title',),
                'verbose_name': 'заполненность',
                'verbose_name_plural': 'заполненность',
            },
        ),
        migrations.CreateModel(
            name='UsersToCompany',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='компания')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Roles', verbose_name='роль')),
                ('new_role', models.CharField(choices=[('SA', 'administrator'), ('OP', 'operator'), ('DR', 'driver')], db_index=True, max_length=2, null=True, verbose_name='роль')),
            ],
        ),
        migrations.RunPython(
            code=fill_new_roles,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name='userstocompany',
            name='role',
        ),
        migrations.RenameField(
            model_name='userstocompany',
            old_name='new_role',
            new_name='role',
        ),
        migrations.DeleteModel(
            name='Roles',
        ),
        migrations.DeleteModel(
            name='Occupancy',
        ),
        migrations.AlterModelOptions(
            name='container',
            options={'verbose_name': 'контейнер', 'verbose_name_plural': 'контейнеры'},
        ),
        migrations.AddField(
            model_name='sectors',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='компания'),
        ),
        migrations.AlterField(
            model_name='container',
            name='press_cycles',
            field=models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='циклы прессования'),
        ),
        migrations.AlterField(
            model_name='userstocompany',
            name='role',
            field=models.CharField(choices=[('SA', 'администратор'), ('OP', 'оператор'), ('DR', 'водитель')], db_index=True, max_length=2, null=True, verbose_name='роль'),
        ),
        migrations.AddField(
            model_name='container',
            name='address',
            field=models.CharField(max_length=256, null=True, verbose_name='адрес'),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='название')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Country', verbose_name='страна')),
            ],
            options={
                'verbose_name': 'город',
                'verbose_name_plural': 'города',
                'ordering': ('title',),
                'unique_together': {('country', 'title')},
            },
        ),
        migrations.AddField(
            model_name='container',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.City', verbose_name='город'),
        ),
        migrations.AlterField(
            model_name='container',
            name='country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.Country', verbose_name='страна'),
        ),
        migrations.AlterField(
            model_name='userstocompany',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='компания'),
        ),
        migrations.AlterField(
            model_name='error',
            name='container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='errors', to='app.Container', verbose_name='контейнер'),
        ),
        migrations.AlterModelOptions(
            name='containertype',
            options={'verbose_name': 'вид контейнера', 'verbose_name_plural': 'виды контейнеров'},
        ),
        migrations.AlterField(
            model_name='container',
            name='container_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ContainerType', verbose_name='вид контейнера'),
        ),
        migrations.AlterField(
            model_name='container',
            name='fullness',
            field=models.IntegerField(default=0, help_text='in percents (%)', null=True, verbose_name='заполненность'),
        ),
        migrations.AddField(
            model_name='container',
            name='battery',
            field=models.IntegerField(default=0, help_text='в процентах (%)', verbose_name='заряд батареи'),
        ),
        migrations.AlterField(
            model_name='container',
            name='fullness',
            field=models.IntegerField(default=0, help_text='в процентах (%)', null=True, verbose_name='заполненность'),
        ),
        migrations.AlterField(
            model_name='container',
            name='phone_number',
            field=phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='телефон'),
        ),
        migrations.AddField(
            model_name='container',
            name='pressure',
            field=models.IntegerField(default=0, help_text='в милиметрах (мм)', verbose_name='давление'),
        ),
        migrations.AddField(
            model_name='container',
            name='temperature',
            field=models.IntegerField(default=0, help_text='в градусах Цельсия (С)', verbose_name='температура'),
        ),
        migrations.AddField(
            model_name='container',
            name='traffic',
            field=models.IntegerField(default=0, help_text='в человеках (ч)', verbose_name='трафик'),
        ),
        migrations.RunPython(
            code=create_userstocompany,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name='Routes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('finish_time', models.DateTimeField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UploadBalance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UploadBattery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UploadError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UploadFullness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UploadPressure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UploadTemperature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UploadTraffic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.AlterModelOptions(
            name='city',
            options={'ordering': ('title',), 'verbose_name': 'city', 'verbose_name_plural': 'cities'},
        ),
        migrations.AlterModelOptions(
            name='company',
            options={'verbose_name': 'company', 'verbose_name_plural': 'companies'},
        ),
        migrations.AlterModelOptions(
            name='container',
            options={'verbose_name': 'container', 'verbose_name_plural': 'containers'},
        ),
        migrations.AlterModelOptions(
            name='containertype',
            options={'verbose_name': 'container type', 'verbose_name_plural': 'container types'},
        ),
        migrations.AlterModelOptions(
            name='country',
            options={'verbose_name': 'country', 'verbose_name_plural': 'country'},
        ),
        migrations.AlterModelOptions(
            name='equipment',
            options={'verbose_name': 'equipment', 'verbose_name_plural': 'equipments'},
        ),
        migrations.AlterModelOptions(
            name='error',
            options={'ordering': ('ctime',), 'verbose_name': 'error', 'verbose_name_plural': 'errors'},
        ),
        migrations.AlterModelOptions(
            name='errortype',
            options={'ordering': ('code',), 'verbose_name': 'error type', 'verbose_name_plural': 'error types'},
        ),
        migrations.AlterModelOptions(
            name='route',
            options={'ordering': ('-ctime',), 'verbose_name': 'route', 'verbose_name_plural': 'routes'},
        ),
        migrations.AlterModelOptions(
            name='sectors',
            options={'verbose_name': 'sector', 'verbose_name_plural': 'sector'},
        ),
        migrations.AlterModelOptions(
            name='wastetype',
            options={'verbose_name': 'waste type', 'verbose_name_plural': 'waste types'},
        ),
        migrations.RemoveField(
            model_name='route',
            name='end_time',
        ),
        migrations.RemoveField(
            model_name='route',
            name='route',
        ),
        migrations.RemoveField(
            model_name='route',
            name='start_time',
        ),
        migrations.AddField(
            model_name='container',
            name='bat_max',
            field=models.PositiveSmallIntegerField(default=100, validators=[django.core.validators.MinValueValidator(0)], verbose_name='BAT_MAX'),
        ),
        migrations.AddField(
            model_name='container',
            name='bat_min_press',
            field=models.PositiveSmallIntegerField(default=70, validators=[django.core.validators.MinValueValidator(0)], verbose_name='BAT_MIN_PRESS'),
        ),
        migrations.AddField(
            model_name='container',
            name='bat_min_pwr',
            field=models.PositiveSmallIntegerField(default=20, validators=[django.core.validators.MinValueValidator(0)], verbose_name='BAT_MIN_PWR'),
        ),
        migrations.AddField(
            model_name='container',
            name='bat_stat_days',
            field=models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)], verbose_name='BAT_STAT_DAYS'),
        ),
        migrations.AddField(
            model_name='container',
            name='ctime',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='create time'),
        ),
        migrations.AddField(
            model_name='container',
            name='ctr_press',
            field=models.FloatField(default=0.06, validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='CTR_PRESS'),
        ),
        migrations.AddField(
            model_name='container',
            name='ctr_pwr',
            field=models.FloatField(default=1.44, validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='CTR_PWR'),
        ),
        migrations.AddField(
            model_name='container',
            name='data_mtime',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='data update time'),
        ),
        migrations.AddField(
            model_name='container',
            name='ef_last_log',
            field=models.TextField(blank=True, null=True, verbose_name='ef_last_log'),
        ),
        migrations.AddField(
            model_name='container',
            name='max_battery_ah',
            field=models.IntegerField(default=25, validators=[django.core.validators.MinValueValidator(1)], verbose_name='MAX_BATTERY_AH'),
        ),
        migrations.AddField(
            model_name='container',
            name='max_battery_v',
            field=models.IntegerField(default=12, validators=[django.core.validators.MinValueValidator(1)], verbose_name='MAX_BATTERY_V'),
        ),
        migrations.AddField(
            model_name='container',
            name='max_volume',
            field=models.IntegerField(default=10, help_text='max volume', verbose_name='max_volume'),
        ),
        migrations.AddField(
            model_name='container',
            name='press_cycles_incr',
            field=models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='cycles of pressing increment'),
        ),
        migrations.AddField(
            model_name='container',
            name='press_cycles_max',
            field=models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)], verbose_name='max cycles of pressing'),
        ),
        migrations.AddField(
            model_name='container',
            name='sensor_sleep_between_press_cycles',
            field=models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)], verbose_name='sensor sleeps between press cycles'),
        ),
        migrations.AddField(
            model_name='container',
            name='sleep_period_start',
            field=models.TimeField(default=datetime.time(19, 0), verbose_name='SLEEP_PERIOD_START'),
        ),
        migrations.AddField(
            model_name='container',
            name='sleep_period_stop',
            field=models.TimeField(default=datetime.time(8, 0), verbose_name='SLEEP_PERIOD_STOP'),
        ),
        migrations.AddField(
            model_name='container',
            name='standby_days_stop',
            field=models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='STANDBY_DAYS_STOP'),
        ),
        migrations.AddField(
            model_name='container',
            name='temp_min',
            field=models.SmallIntegerField(default=-10, verbose_name='TEMP_MIN'),
        ),
        migrations.AddField(
            model_name='error',
            name='actual',
            field=models.IntegerField(default=1, verbose_name='actual data'),
        ),
        migrations.AddField(
            model_name='route',
            name='parent_route',
            field=models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, related_name='parent_route', to='app.Routes', verbose_name='parent_route'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='route',
            name='route_json',
            field=django.contrib.postgres.fields.jsonb.JSONField(default={}, verbose_name='route'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='route',
            name='status',
            field=models.IntegerField(default=0, null=True),
        ),
        migrations.AddField(
            model_name='routes',
            name='company',
            field=models.ForeignKey(blank=True, default=-1, on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='company'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='city',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Country', verbose_name='country'),
        ),
        migrations.AlterField(
            model_name='city',
            name='title',
            field=models.CharField(max_length=128, verbose_name='title'),
        ),
        migrations.AlterField(
            model_name='company',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Country', verbose_name='country'),
        ),
        migrations.AlterField(
            model_name='company',
            name='minsim',
            field=models.IntegerField(default=0, verbose_name='minimal SIM balance'),
        ),
        migrations.AlterField(
            model_name='company',
            name='name',
            field=models.CharField(max_length=128, verbose_name='title'),
        ),
        migrations.AlterField(
            model_name='container',
            name='address',
            field=models.CharField(max_length=256, null=True, verbose_name='address'),
        ),
        migrations.AlterField(
            model_name='container',
            name='battery',
            field=models.IntegerField(default=0, help_text='in percents (%)', verbose_name='battery charge'),
        ),
        migrations.AlterField(
            model_name='container',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.City', verbose_name='city'),
        ),
        migrations.AlterField(
            model_name='container',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='company'),
        ),
        migrations.AlterField(
            model_name='container',
            name='container_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ContainerType', verbose_name='container type'),
        ),
        migrations.AlterField(
            model_name='container',
            name='country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.Country', verbose_name='country'),
        ),
        migrations.AlterField(
            model_name='container',
            name='fullness',
            field=models.IntegerField(default=0, help_text='in percents (%)', null=True, verbose_name='fullness'),
        ),
        migrations.AlterField(
            model_name='container',
            name='is_master',
            field=models.BooleanField(default=False, verbose_name='is master'),
        ),
        migrations.AlterField(
            model_name='container',
            name='location',
            field=django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location'),
        ),
        migrations.AlterField(
            model_name='container',
            name='phone_number',
            field=models.CharField(max_length=15, verbose_name='phone number'),
        ),
        migrations.AlterField(
            model_name='container',
            name='press_cycles',
            field=models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cycles of pressing'),
        ),
        migrations.AlterField(
            model_name='container',
            name='pressure',
            field=models.IntegerField(default=0, help_text='in milimeters (mm)', verbose_name='pressure'),
        ),
        migrations.AlterField(
            model_name='container',
            name='sector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Sectors', verbose_name='sector'),
        ),
        migrations.AlterField(
            model_name='container',
            name='serial_number',
            field=models.CharField(max_length=200, verbose_name='serial number'),
        ),
        migrations.AlterField(
            model_name='container',
            name='temperature',
            field=models.IntegerField(default=0, help_text='in celsius (C)', verbose_name='temperature'),
        ),
        migrations.AlterField(
            model_name='container',
            name='traffic',
            field=models.IntegerField(default=0, help_text='in humans (h)', verbose_name='traffic'),
        ),
        migrations.AlterField(
            model_name='container',
            name='waste_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.WasteType', verbose_name='waste type'),
        ),
        migrations.AlterField(
            model_name='containertype',
            name='title',
            field=models.CharField(max_length=200, verbose_name='title'),
        ),
        migrations.AlterField(
            model_name='country',
            name='name',
            field=models.CharField(max_length=128, verbose_name='title'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='title',
            field=models.CharField(max_length=32, verbose_name='title'),
        ),
        migrations.AlterField(
            model_name='error',
            name='container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='errors', to='app.Container', verbose_name='container'),
        ),
        migrations.AlterField(
            model_name='error',
            name='ctime',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='error create time'),
        ),
        migrations.AlterField(
            model_name='error',
            name='error_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ErrorType', verbose_name='error type'),
        ),
        migrations.AlterField(
            model_name='errortype',
            name='code',
            field=models.CharField(max_length=8, verbose_name='code error'),
        ),
        migrations.AlterField(
            model_name='errortype',
            name='description',
            field=models.TextField(blank=True, null=True, verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='errortype',
            name='equipment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Equipment', verbose_name='equipment'),
        ),
        migrations.AlterField(
            model_name='errortype',
            name='title',
            field=models.CharField(max_length=256, verbose_name='title'),
        ),
        migrations.AlterField(
            model_name='route',
            name='ctime',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at'),
        ),
        migrations.CreateModel(
            name='RoutesDrivers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.NullBooleanField(default=True)),
                ('start_time', models.DateTimeField(default=None, null=True)),
                ('finish_time', models.DateTimeField(default=None, null=True)),
                ('driver', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='driver', to=settings.AUTH_USER_MODEL, verbose_name='driver')),
                ('base_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Routes')),
                ('company', models.ForeignKey(blank=True, default=-1, on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='company')),
                ('fullness_green', models.IntegerField(default=0)),
                ('fullness_orange', models.IntegerField(default=0)),
                ('fullness_red', models.IntegerField(default=0)),
                ('fullness_yellow', models.IntegerField(default=0)),
                ('route', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='app.Route')),
                ('track', models.IntegerField(default=0, null=True)),
                ('track_full', models.IntegerField(default=0, null=True)),
            ],
        ),
        migrations.AlterField(
            model_name='sectors',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='company'),
        ),
        migrations.AlterField(
            model_name='sectors',
            name='name',
            field=models.CharField(max_length=200, verbose_name='title'),
        ),
        migrations.AlterField(
            model_name='userstocompany',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Company', verbose_name='company'),
        ),
        migrations.AlterField(
            model_name='userstocompany',
            name='role',
            field=models.CharField(choices=[('SA', 'administrator'), ('OP', 'operator'), ('DR', 'driver')], db_index=True, max_length=2, null=True, verbose_name='role'),
        ),
        migrations.AlterField(
            model_name='wastetype',
            name='code',
            field=models.CharField(db_index=True, max_length=8, null=True, verbose_name='waste code'),
        ),
        migrations.AlterField(
            model_name='wastetype',
            name='title',
            field=models.CharField(max_length=200, verbose_name='title'),
        ),
        migrations.CreateModel(
            name='Traffic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('traffic_value', models.IntegerField(default=0)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location')),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traffic_table', to='app.Container', verbose_name='container')),
            ],
        ),
        migrations.CreateModel(
            name='Temperature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('temperature_value', models.IntegerField(default=0)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location')),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temperature_table', to='app.Container', verbose_name='container')),
            ],
            options={
                'ordering': ('ctime',),
                'verbose_name': 'temperature',
                'verbose_name_plural': 'temperature',
            },
        ),
        migrations.CreateModel(
            name='SimBalance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('balance', models.IntegerField(default=0)),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sim_balance_table', to='app.Container', verbose_name='container')),
            ],
            options={
                'ordering': ('ctime',),
                'verbose_name': 'sim_balance',
                'verbose_name_plural': 'sim_balance',
            },
        ),
        migrations.CreateModel(
            name='RoutePoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at')),
                ('mtime', models.DateTimeField(default=None, null=True, verbose_name='modified at')),
                ('comment', models.CharField(max_length=500)),
                ('status', models.IntegerField(default=0)),
                ('fullness', models.IntegerField(default=None, null=True)),
                ('fullness_color', models.IntegerField(default=0, null=True)),
                ('volume', models.IntegerField(default=10, null=True)),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routepoints', to='app.Container', verbose_name='container')),
                ('parent_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routes_parent_route', to='app.Routes', verbose_name='parent route')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routes_route', to='app.Route', verbose_name='parent route')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-ctime',),
                'verbose_name': 'routepoints',
                'verbose_name_plural': 'route_points',
            },
        ),
        migrations.CreateModel(
            name='Pressure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('pressure_value', models.IntegerField(default=0)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location')),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pressure_table', to='app.Container', verbose_name='container')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location')),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_table', to='app.Container', verbose_name='container')),
            ],
            options={
                'ordering': ('ctime',),
                'verbose_name': 'location',
                'verbose_name_plural': 'location',
            },
        ),
        migrations.CreateModel(
            name='FullnessValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('fullness_value', models.IntegerField(default=0)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location')),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fullness_table', to='app.Container', verbose_name='container')),
            ],
            options={
                'db_table': 'app_fullness',
            },
        ),
        migrations.CreateModel(
            name='FullnessStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('collection_time', models.DateTimeField(blank=True, null=True)),
                ('fullness_before_press', models.IntegerField(default=0)),
                ('fullness_after_press', models.IntegerField(default=0)),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('containerid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fullness_stats_table', to='app.Container', verbose_name='container')),
            ],
            options={
                'db_table': 'app_container_stats',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('fullness', models.IntegerField(default=0)),
                ('fullness_before_press', models.IntegerField(blank=True, default=0, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Container', verbose_name='container')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='driver')),
            ],
        ),
        migrations.CreateModel(
            name='Battery_Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('level', models.IntegerField(default=0)),
                ('volts', models.IntegerField(default=0)),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Container', verbose_name='container')),
            ],
        ),
        migrations.AddField(
            model_name='container',
            name='disable_ef_alg',
            field=models.BooleanField(default=True, verbose_name='disable_ef_alg'),
        ),
        migrations.AddField(
            model_name='container',
            name='turn_on',
            field=models.BooleanField(default=True, verbose_name='turn_on'),
        ),
        migrations.AddField(
            model_name='city',
            name='title_en',
            field=models.CharField(max_length=128, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='city',
            name='title_ru',
            field=models.CharField(max_length=128, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='containertype',
            name='title_en',
            field=models.CharField(max_length=200, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='containertype',
            name='title_ru',
            field=models.CharField(max_length=200, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='country',
            name='name_en',
            field=models.CharField(max_length=128, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='country',
            name='name_ru',
            field=models.CharField(max_length=128, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='title_en',
            field=models.CharField(max_length=32, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='title_ru',
            field=models.CharField(max_length=32, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='errortype',
            name='title_en',
            field=models.CharField(max_length=256, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='errortype',
            name='title_ru',
            field=models.CharField(max_length=256, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='sectors',
            name='name_en',
            field=models.CharField(max_length=200, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='sectors',
            name='name_ru',
            field=models.CharField(max_length=200, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='wastetype',
            name='title_en',
            field=models.CharField(max_length=200, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='wastetype',
            name='title_ru',
            field=models.CharField(max_length=200, null=True, verbose_name='title'),
        ),
        migrations.RunPython(
            code=fill_models,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='battery_level',
            name='volts',
            field=models.FloatField(default=0),
        ),
        migrations.AlterField(
            model_name='route',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AlterField(
            model_name='userstocompany',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='container',
            name='autogenerate_data',
            field=models.BooleanField(default=False, verbose_name='autogenerate_data'),
        ),
        migrations.CreateModel(
            name='Humidity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('humidity_value', models.IntegerField(default=0)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location')),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='humidity_table', to='app.Container', verbose_name='container')),
            ],
        ),
        migrations.AddField(
            model_name='container',
            name='humidity',
            field=models.IntegerField(default=0, help_text='in percents (%)', verbose_name='humidity'),
        ),
        migrations.AddField(
            model_name='container',
            name='air_quality',
            field=models.IntegerField(default=0, help_text='AQI value', verbose_name='air_quality'),
        ),
        migrations.AlterField(
            model_name='container',
            name='max_volume',
            field=models.IntegerField(default=120, help_text='max volume', verbose_name='max_volume'),
        ),
        migrations.AlterField(
            model_name='routepoints',
            name='volume',
            field=models.IntegerField(default=120, null=True),
        ),
        migrations.CreateModel(
            name='AirQuality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('air_quality_value', models.IntegerField(default=0)),
                ('location', django.contrib.gis.db.models.fields.PointField(default='SRID=4326;POINT (37.6198482461064785 55.7535037511883829)', srid=4326, verbose_name='location')),
                ('actual', models.IntegerField(default=1, verbose_name='actual data')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='air_quality_table', to='app.Container', verbose_name='container')),
            ],
        ),
        migrations.AddField(
            model_name='collection',
            name='route_point',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.RoutePoints'),
        ),
        migrations.AlterField(
            model_name='container',
            name='serial_number',
            field=models.CharField(max_length=200, unique=True, verbose_name='serial number'),
        ),
        migrations.AddField(
            model_name='wastetype',
            name='density',
            field=models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)]),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='container',
            name='master_bin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='satellites', to='app.Container'),
        ),
        migrations.AlterField(
            model_name='container',
            name='is_master',
            field=models.BooleanField(default=True, verbose_name='is master'),
        ),
        migrations.AlterField(
            model_name='container',
            name='sector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.Sectors', verbose_name='sector'),
        ),
        migrations.AlterField(
            model_name='company',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.Country', verbose_name='country'),
        ),
        migrations.AlterField(
            model_name='container',
            name='container_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.ContainerType', verbose_name='container type'),
        ),
        migrations.AlterField(
            model_name='container',
            name='waste_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.WasteType', verbose_name='waste type'),
        ),
        migrations.AlterField(
            model_name='errortype',
            name='equipment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='app.Equipment', verbose_name='equipment'),
        ),
        migrations.DeleteModel(
            name='UploadBalance',
        ),
        migrations.DeleteModel(
            name='UploadBattery',
        ),
        migrations.DeleteModel(
            name='UploadError',
        ),
        migrations.DeleteModel(
            name='UploadFullness',
        ),
        migrations.DeleteModel(
            name='UploadPressure',
        ),
        migrations.DeleteModel(
            name='UploadTemperature',
        ),
        migrations.DeleteModel(
            name='UploadTraffic',
        ),
        migrations.AlterField(
            model_name='collection',
            name='driver',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='driver'),
        ),
        migrations.AddField(
            model_name='company',
            name='username_prefix',
            field=models.CharField(blank=True, max_length=80, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()]),
        ),
    ]
